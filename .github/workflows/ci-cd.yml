name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main] # Only run on main branch to save GitHub Actions minutes
  # pull_request:
  #   branches: [main]  # Commented out to save minutes on free plan

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.10.0'

jobs:
  # 🧪 Testing & Quality Checks (COMMENTED OUT TO SAVE GITHUB ACTIONS MINUTES)
  # test:
  #   name: 🧪 Test & Quality
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres:15-alpine
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_USER: postgres
  #         POSTGRES_DB: cookbook_test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #     redis:
  #       image: redis:7-alpine
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 6379:6379
  #   steps:
  #     - name: 📥 Checkout code
  #       uses: actions/checkout@v4
  #     - name: 📦 Setup pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: ${{ env.PNPM_VERSION }}
  #     - name: 🟢 Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'pnpm'
  #     - name: 📥 Install dependencies
  #       run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
  #     - name: 🔍 Lint code
  #       run: pnpm lint
  #     - name: 🗄️ Generate Prisma client
  #       run: pnpm db:generate
  #     - name: 🏗️ Build application
  #       run: pnpm build
  #     - name: 🗄️ Setup test database
  #       env:
  #         DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cookbook_test
  #       run: |
  #         pnpm db:generate
  #         pnpm db:push
  #     - name: 🧪 Run unit tests
  #       env:
  #         DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cookbook_test
  #         REDIS_URL: redis://localhost:6379
  #         JWT_SECRET: test-secret
  #         JWT_REFRESH_SECRET: test-refresh-secret
  #         GEMINI_API_KEY: test-key
  #       run: pnpm test --detectOpenHandles --forceExit
  #     - name: 📊 Run test coverage
  #       env:
  #         DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cookbook_test
  #         REDIS_URL: redis://localhost:6379
  #         JWT_SECRET: test-secret
  #         JWT_REFRESH_SECRET: test-refresh-secret
  #         GEMINI_API_KEY: test-key
  #       run: pnpm test:cov --detectOpenHandles --forceExit
  #     - name: 📈 Upload coverage to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         file: ./coverage/lcov.info
  #         flags: unittests
  #         name: cookbook-connect-coverage

  # 🔒 Security Scan (COMMENTED OUT TO SAVE GITHUB ACTIONS MINUTES)
  # security:
  #   name: 🔒 Security Scan
  #   runs-on: ubuntu-latest
  #   needs: test
  #   continue-on-error: true
  #   steps:
  #     - name: 📥 Checkout code
  #       uses: actions/checkout@v4
  #     - name: 🔍 Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       continue-on-error: true
  #       with:
  #         scan-type: 'fs'
  #         scan-ref: '.'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #     - name: 📤 Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       continue-on-error: true
  #       with:
  #         sarif_file: 'trivy-results.sarif'
  #     - name: 📋 Security Scan Summary
  #       if: always()
  #       run: |
  #         echo "🔒 Security scan completed (non-blocking)"
  #         echo "ℹ️  Check the Security tab for detailed results"
  #         echo "✅ Deployment will continue regardless of security findings"

  # 🐳 Build Docker Image (COMMENTED OUT TO SAVE GITHUB ACTIONS MINUTES)
  # build:
  #   name: 🐳 Build Docker Image
  #   runs-on: ubuntu-latest
  #   needs: [test]
  #   if: github.ref == 'refs/heads/main'
  #   continue-on-error: true
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: 📥 Checkout code
  #       uses: actions/checkout@v4
  #     - name: 🐳 Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: 🔑 Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: 🏷️ Extract metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ghcr.io/${{ github.repository }}
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=sha,prefix={{branch}}-
  #           type=raw,value=latest,enable={{is_default_branch}}
  #     - name: 🏗️ Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       continue-on-error: true
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         platforms: linux/amd64,linux/arm64
  #     - name: 📋 Docker Build Summary
  #       if: always()
  #       run: |
  #         echo "🐳 Docker build completed (optional)"
  #         echo "ℹ️  Docker images are for future container deployments"
  #         echo "✅ Railway deployment will continue regardless of Docker build status"

  # 🚀 Deploy to Railway
  deploy:
    name: 🚀 Deploy to Railway
    runs-on: ubuntu-latest
    # No dependencies - deploy directly to save GitHub Actions minutes
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: |
          # Try frozen lockfile first, fallback if needed
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: 🗄️ Generate Prisma client
        run: pnpm db:generate

      - name: 🏗️ Build application
        run: pnpm build

      - name: 🚂 Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: 🔧 Configure Railway Authentication & Project Linking
        run: |
          # Create Railway config directory and authentication file with project linking
          mkdir -p ~/.railway
          cat > ~/.railway/config.json << EOF
          {
            "projects": {
              "${{ github.workspace }}": {
                "projectPath": "${{ github.workspace }}",
                "name": "cookbook-backend",
                "project": "${{ secrets.RAILWAY_PROJECT_ID }}",
                "environment": "${{ secrets.RAILWAY_ENVIRONMENT_ID }}",
                "environmentName": "production",
                "service": null
              }
            },
            "user": {
              "token": "${{ secrets.RAILWAY_TOKEN }}"
            },
            "linkedFunctions": null
          }
          EOF

      - name: 🚂 Deploy to Railway
        run: |
          # Deploy using Railway CLI - this will create the service if it doesn't exist
          railway up --detach

      - name: 🔧 Set Railway Environment Variables
        run: |
          # Set all required environment variables in Railway after deployment
          railway variables \
            --set "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
            --set "REDIS_URL=${{ secrets.REDIS_URL }}" \
            --set "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
            --set "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
            --set "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" \
            --set "NODE_ENV=production" \
            --set "PORT=3000"

      - name: ⏳ Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

      - name: 🗄️ Run database migrations
        run: |
          # Run migrations on Railway - using config file authentication
          railway run -- npx prisma migrate deploy

  # 🔔 Notification
  notify:
    name: 🔔 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: 📋 Deployment Summary
        run: |
          echo "🚀 CookBook Connect Backend - Deployment Summary"
          echo "================================================"
          echo "🚂 Railway Deploy: ${{ needs.deploy.result }}"
          echo ""
          echo "ℹ️  Tests, Security Scan, and Docker Build were skipped to save GitHub Actions minutes"
          echo ""
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ SUCCESS: Your CookBook Connect backend is now LIVE!"
            echo "🌐 GraphQL Playground: https://cookbook-backend.railway.app/graphql"
            echo "🔍 Health Check: https://cookbook-backend.railway.app/health"
            echo "📊 Check Railway dashboard for detailed metrics"
            echo ""
            echo "💡 To enable full CI/CD pipeline later:"
            echo "   - Uncomment test, security, and build jobs in .github/workflows/ci-cd.yml"
            echo "   - This will run tests, security scans, and Docker builds"
          else
            echo "❌ FAILED: Deployment unsuccessful"
            echo "🔍 Check the Railway Deploy job logs for details"
          fi

      - name: 🔔 Send Slack notification
        if: vars.SLACK_WEBHOOK_URL != ''
        uses: rtCamp/action-slack-notify@v2
        continue-on-error: true
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: '#deployments'
          SLACK_COLOR: ${{ needs.deploy.result == 'success' && 'good' || 'danger' }}
          SLACK_MESSAGE: |
            *CookBook Connect Backend Deployment:*
            *Status:* `${{ needs.deploy.result }}`
            *Branch:* `${{ github.ref_name }}`
            *Commit:* `${{ github.sha }}`
            *URL:* https://cookbook-backend.railway.app/graphql
