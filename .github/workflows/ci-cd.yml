name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.10.0'

jobs:
  # 🧪 Testing & Quality Checks
  test:
    name: 🧪 Test & Quality
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: cookbook_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: |
          # Try frozen lockfile first, fallback if needed
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: 🔍 Lint code
        run: pnpm lint

      - name: 🗄️ Generate Prisma client
        run: pnpm db:generate

      - name: 🏗️ Build application
        run: pnpm build

      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cookbook_test
        run: |
          pnpm db:generate
          pnpm db:push

      - name: 🧪 Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cookbook_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret
          GEMINI_API_KEY: test-key
        run: pnpm test

      - name: 📊 Run test coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cookbook_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret
          GEMINI_API_KEY: test-key
        run: pnpm test:cov

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: cookbook-connect-coverage

  # 🔒 Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 🐳 Build Docker Image
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # 🚀 Deploy to Railway
  deploy:
    name: 🚀 Deploy to Railway
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚂 Deploy to Railway
        uses: railwayapp/railway-deploy@v2
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: cookbook-backend
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}

      - name: 🗄️ Run database migrations
        uses: railwayapp/railway-run@v2
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: cookbook-backend
          command: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # 🔔 Notification
  notify:
    name: 🔔 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: 📢 Deployment Success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "🌐 Application URL: https://cookbook-backend.railway.app"

      - name: ❌ Deployment Failed
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          exit 1
